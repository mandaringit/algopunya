# 입력 : 종이의 세로 N, 가로 M
# 출력 : 테트로미노 모양을 종이의 한 위치에 놓았을때, 테트로미노 영역에 들어간 종이의 숫자의 합이 최대인 경우.(테트로미노는 회전, 대칭 가능)
# 접근 : 테트로미노 기본 모양 + 회전 및 대칭모양을 전부 N*M에 놓아보며 확인해본다.?

import sys

sys.stdin = open('input.txt', 'r')

N, M = map(int, input().split())
papers = [list(map(int, input().split())) for _ in range(N)]
maxV = 0
for i in range(N):
    for j in range(M):



        Shapes = [
            [(0, 0), (0, 1), (0, 2), (0, 3)],  # ㅡ 모양
            [(0, 0), (1, 0), (2, 0), (3, 0)],  # ㅣ모양
            [(0, 0), (0, 1), (1, 0), (1, 1)],  # ㅁ
            [(0, 0), (-1, 0), (-2, 0), (0, 1)],  # ㄴ
            [(0, 0), (-1, 0), (-2, 0), (0, -1)],  # ㄴ 대칭
            [(0, 0), (0, 1), (0, 2), (-1, 2)],  # ㄴ -90도
            [(0, 0), (0, 1), (0, 2), (1, 2)],  # ㄴ -90도 대칭
            [(0, 0), (0, 1), (0, 2), (1, 0)],  # ㄴ 90도
            [(0, 0), (0, 1), (0, 2), (-1, 0)],  # ㄴ 90도 대칭
            [(0, 0), (0, 1), (1, 1), (2, 1)],  # ㄴ 180도
            [(0, 0), (1, 0), (2, 0), (0, 1)],  # ㄴ 180도 대칭
            [(0, 0), (-1, 0), (0, 1), (1, 1)],  # 번개
            [(0, 0), (0, 1), (1, 0), (-1, 1)],  # 번개 대칭
            [(0, 0), (0, 1), (-1, 1), (-1, 2)],  # 번개 90도
            [(0, 0), (0, 1), (1, 1), (1, 2)],  # 번개 90도 대칭
            [(0, 0), (0, 1), (0, 2), (1, 1)],  # ㅜ
            [(0, 0), (1, 0), (2, 0), (1, -1)],  # ㅜ 90
            [(0, 0), (1, 0), (2, 0), (1, 1)],  # ㅜ -90도
            [(0, 0), (0, 1), (0, 2), (-1, 1)]  # ㅜ 180도
        ]

        for shape in Shapes:
            # is_range_out = False
            total = 0
            for di, dj in shape:
                ni = i + di
                nj = j + dj

                if 0 <= ni < N and 0 <= nj < M:
                    total += papers[ni][nj]
                # else:
                #     is_range_out = True

            # if not is_range_out:
            if maxV < total:
                maxV = total
print(maxV)
